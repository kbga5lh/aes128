use ndarray::Array2;
use std::ops::Add;

const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const SBOX_INV: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

const RCON: [[u8; 4]; 11] = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
];

const MDS_MATRIX: [[u8; 4]; 4] = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02],
];

const INV_MDS_MATRIX: [[u8; 4]; 4] = [
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e],
];

const NK: usize = 4;
const NR: usize = 10;
const NB: usize = 4;

fn main() {
    println!("Enter a string to encode:");
    let input = {
        let mut input = String::new();
        std::io::stdin().read_line(&mut input);
        String::from(input.trim())
    };

    println!("Enter a key:");
    let key = read_key();
    println!("Your key: {}", key);

    let encrypted_string = encrypt(&input.as_bytes(), key.as_bytes());
    println!("Encrypted string  : {}", as_hex_string(&encrypted_string));
    let decrypted_string = decrypt(&encrypted_string, key.as_bytes());
    println!("Decrypted string  : {}", bytes_to_string(&decrypted_string));
}

fn read_key() -> String {
    let mut key = String::new();
    std::io::stdin().read_line(&mut key);
    key = String::from(key.trim());
    if key.len() < NB * NK {
        let chars_to_add = NB * NK - key.len();
        key = key.add(&"\0".repeat(chars_to_add));
    } else if key.len() > NB * NK {
        key.truncate(NB * NK);
    }
    key
}

fn encrypt(input: &[u8], key: &[u8]) -> Vec<u8> {
    let mut result = Vec::new();
    let key_schedule = key_expansion(key);

    for block_ind in 0..(input.len() + (NK * NK - 1)) / (NK * NK) {
        let mut state = get_state_matrix(&input, block_ind);

        add_key(&mut state, &key_schedule[0..NB].concat());

        for round in 0..NR - 1 {
            sub_bytes(&mut state);
            shift_rows(&mut state);
            mix_columns(&mut state);
            add_key(
                &mut state,
                &key_schedule[(round + 1) * NB..(round + 2) * NB].concat(),
            );
        }

        sub_bytes(&mut state);
        shift_rows(&mut state);
        add_key(&mut state, &key_schedule[NR * NB..(NR + 1) * NB].concat());

        result.append(&mut state.into_raw_vec());
    }
    result
}

fn decrypt(input: &[u8], key: &[u8]) -> Vec<u8> {
    let mut result = Vec::new();
    let key_schedule = key_expansion(key);

    for block_ind in 0..(input.len() + (NK * NK - 1)) / (NK * NK) {
        let mut state = get_state_matrix(&input, block_ind);

        add_key(&mut state, &key_schedule[NR * NB..(NR + 1) * NB].concat());

        for round in (0..(NR - 1) as isize).rev() {
            let round = round as usize;
            shift_rows_inv(&mut state);
            sub_bytes_inv(&mut state);
            add_key(
                &mut state,
                &key_schedule[(round + 1) * NB..(round + 2) * NB].concat(),
            );
            mix_columns_inv(&mut state);
        }

        shift_rows_inv(&mut state);
        sub_bytes_inv(&mut state);
        add_key(&mut state, &key_schedule[0..NB].concat());

        result.append(&mut state.into_raw_vec());
    }
    let p = result.iter().rposition(|v| *v != 0);
    if let Some(a) = p {
        result.truncate(a + 1);
    }
    result
}

fn get_state_matrix(input: &[u8], block_ind: usize) -> Array2<u8> {
    let mut state: Array2<u8> = Array2::zeros((NK, NK));
    for i in block_ind * (NK * NK)..(block_ind + 1) * (NK * NK) {
        if i >= input.len() {
            break;
        }
        state[[(i % (NK * NK)) / NK, i % NK]] = input[i];
    }
    state
}

fn as_hex_string(input: &[u8]) -> String {
    input
        .iter()
        .map(|v| format!("{:02X?} ", *v))
        .collect::<String>()
}

fn bytes_to_string(bytes: &[u8]) -> String {
    bytes.iter().map(|v: &u8| *v as char).collect::<String>()
}

fn key_expansion(key: &[u8]) -> [[u8; NK]; NB * (NR + 1)] {
    let mut result = [[0; NK]; NB * (NR + 1)];
    for i in 0..NK {
        result[i] = [
            key[i * NK],
            key[i * NK + 1],
            key[i * NK + 2],
            key[i * NK + 3],
        ];
    }
    for i in NK..result.len() {
        let mut temp = result[i - 1].clone();
        if i % NK == 0 {
            temp = xor_word(&sub_word(&rot_word(&temp)), &RCON[i / NK]);
        } else if NK > 6 && i % NK == 4 {
            temp = sub_word(&temp);
        }
        result[i] = xor_word(&result[i - NK], &temp);
    }
    result
}

fn shift_rows(state: &mut Array2<u8>) {
    for x in 0..NK {
        let buffer = state.column(x).to_vec();
        for y in 0..NK {
            state[[y, x]] = buffer[(y + x) % NK];
        }
    }
}

fn shift_rows_inv(state: &mut Array2<u8>) {
    for x in 0..NK {
        let buffer = state.column(x).to_vec();
        for y in 0..NK {
            state[[y, x]] = buffer[((NK * NK) + y - x) % NK];
        }
    }
}

fn sub_bytes(state: &mut Array2<u8>) {
    for byte in state {
        *byte = SBOX[*byte as usize];
    }
}

fn sub_bytes_inv(state: &mut Array2<u8>) {
    for byte in state {
        *byte = SBOX_INV[*byte as usize];
    }
}

fn mix_columns(state: &mut Array2<u8>) {
    for x in 0..NK {
        let buffer: Vec<u8> = state.row(x).to_vec();
        for y in 0..NK {
            state[[x, y]] = g_mul(buffer[0], MDS_MATRIX[y][0])
                ^ g_mul(buffer[1], MDS_MATRIX[y][1])
                ^ g_mul(buffer[2], MDS_MATRIX[y][2])
                ^ g_mul(buffer[3], MDS_MATRIX[y][3]);
        }
    }
}

fn mix_columns_inv(state: &mut Array2<u8>) {
    for x in 0..NK {
        let buffer: Vec<u8> = state.row(x).to_vec();
        for y in 0..NK {
            state[[x, y]] = g_mul(buffer[0], INV_MDS_MATRIX[y][0])
                ^ g_mul(buffer[1], INV_MDS_MATRIX[y][1])
                ^ g_mul(buffer[2], INV_MDS_MATRIX[y][2])
                ^ g_mul(buffer[3], INV_MDS_MATRIX[y][3]);
        }
    }
}

fn add_key(state: &mut Array2<u8>, key: &[u8]) {
    let mut key_it = key.iter();
    for byte in state {
        *byte = *byte
            ^ *key_it
                .next()
                .expect("Key's length should be the same as the state's length");
    }
}

fn g_mul(mut left: u8, mut right: u8) -> u8 {
    let mut result = 0;
    for _i in 0..8 {
        if (right & 1) != 0 {
            result ^= left;
        }

        let hi_bit_set = (left & 0x80) != 0;
        left <<= 1;
        if hi_bit_set {
            left ^= 0x1B;
        }
        right >>= 1;
    }
    result
}

fn xor_word(left: &[u8], right: &[u8]) -> [u8; NK] {
    let mut result = [0; NK];
    for i in 0..NK {
        result[i] = left[i] ^ right[i];
    }
    result
}

fn sub_word(input: &[u8]) -> [u8; NK] {
    let mut result = [0; NK];
    for i in 0..NK {
        result[i] = SBOX[input[i] as usize];
    }
    result
}

fn rot_word(input: &[u8]) -> [u8; NK] {
    let mut result = [0; NK];
    for i in 0..NK {
        result[i] = input[(i + 1) % NK];
    }
    result
}
